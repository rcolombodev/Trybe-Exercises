// 1 - Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
// Modifique as concatena√ß√µes para template literals .
// Copie o c√≥digo abaixo.
// Copiar
const testingScope = escopo => { 
  if (escopo === true) { 
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
    console.log(ifScope);
  } else {
    const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope(true);


// 2 - Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.





      const oddsAndEvens = [13, 3, 4, 10, 7, 2];

      const orderNumbers = orderArray => {
        let orderOddsAndEvens = 0;
        for(let index = 1; index < oddsAndEvens.length; index += 1){
          for (let index2 in oddsAndEvens) {
            if(oddsAndEvens[index] < oddsAndEvens[index2]){
              orderOddsAndEvens = oddsAndEvens[index]
              oddsAndEvens[index] = oddsAndEvens[index2];
              oddsAndEvens[index2] = orderOddsAndEvens
            }
          }
        }
        return orderArray;
      }
      const result = orderNumbers(oddsAndEvens)

      console.log(`Os n√∫meros ${result} se encontram ordenados de forma crescente!`);

      const sortNumbers = array => {
        const sortOddsAndEvens = array.sort((a, b) => a - b)
        return sortOddsAndEvens;
      }

      const resultBonus = sortNumbers(oddsAndEvens)
      
      console.log(`Os n√∫meros ${resultBonus} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ